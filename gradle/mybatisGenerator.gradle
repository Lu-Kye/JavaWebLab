configurations {
    mybatisGenerator
}

dependencies {
    mybatisGenerator "org.mybatis.generator:mybatis-generator-core:${generatorVersion}"
    mybatisGenerator "mysql:mysql-connector-java:${mysqlVersion}"
    mybatisGenerator "tk.mybatis:mapper:${mybatisMapperVersion}"
}

def getDbProperties = {
    def properties = new Properties()
    file("src/main/resources/jdbc.properties").withInputStream { inputStream ->
        properties.load(inputStream)
    }
    return properties
}

def getGeneratorProperties = {
    def properties = new Properties()
    file("src/main/resources/generator.properties").withInputStream { inputStream ->
        properties.load(inputStream)
    }
    return properties
}

task mybatisGenerate {
    doLast {
        def dbProperties = getDbProperties()
        ant.properties['targetProject'] = projectDir.path
        ant.properties['driverClass'] = dbProperties.getProperty("jdbc.driverClassName")
        ant.properties['connectionURL'] = dbProperties.getProperty("jdbc.url")
        ant.properties['userId'] = dbProperties.getProperty("jdbc.user")
        ant.properties['password'] = dbProperties.getProperty("jdbc.pass")
        ant.properties['src_main_java'] = sourceSets.main.java.srcDirs[0].path
        ant.properties['src_main_resources'] = sourceSets.main.resources.srcDirs[0].path

        def generatorProperties = getGeneratorProperties()
        ant.properties['modelPackage'] = generatorProperties.getProperty("modelPackage")
        ant.properties['mapperPackage'] = generatorProperties.getProperty("mapperPackage")
        ant.properties['sqlMapperPackage'] = generatorProperties.getProperty("sqlMapperPackage")

        ant.taskdef(
                name: 'mbgenerator',
                classname: 'org.mybatis.generator.ant.GeneratorAntTask',
                classpath: configurations.mybatisGenerator.asPath
        )
        ant.mbgenerator(overwrite: true,
                configfile: 'src/main/resources/generatorConfig.xml', verbose: true) {
            propertyset {
                propertyref(name: 'targetProject')
                propertyref(name: 'userId')
                propertyref(name: 'driverClass')
                propertyref(name: 'connectionURL')
                propertyref(name: 'password')
                propertyref(name: 'src_main_java')
                propertyref(name: 'src_main_resources')
                propertyref(name: 'modelPackage')
                propertyref(name: 'mapperPackage')
                propertyref(name: 'sqlMapperPackage')
            }
        }
    }
}
